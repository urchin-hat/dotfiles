#!/usr/bin/env python
# coding: utf-8
"""
using
1. Please create virtual environment with virtualenv and install from requirements.txt.
$ pip install --require requirements.txt

2. settings.yaml.template -> settings.yaml
https://console.developers.google.com/
Please obtain a token from the above URL.
Then enter the token in settings.yaml

3. Please allow it because it will be authenticated the first time.

4. Please run the script
$ python backup <backup_dir_name>
$ ./backup <backup_dir_name>
"""
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

from enum import Enum

import sys
import os
import platform
import datetime

os.chdir(os.path.dirname(os.path.abspath(__file__)))

# Conecting Google Drive
gauth = GoogleAuth()
gauth.CommandLineAuth()
drive = GoogleDrive(gauth)


class GoogleDrive:
    def __init__(self, dir_name):
        self.dir_name = dir_name
        dirNameList = []

        for item in drive.ListFile({
                'q': "'root' in parents and trashed=false"
        }).GetList():
            if item['mimeType'] == MineType.GF.value:
                dirNameList.append(item["title"])

        if not self.dir_name in dirNameList:
            file = drive.CreateFile({
                'title': self.dir_name,
                'parents': 'root',
                'mimeType': MineType.GF.value
            })
            file.Upload()

    def search_id(self, dir_name, status="root"):
        self.item_id = ""
        for item in drive.ListFile({
                'q':
                "'{}' in parents and trashed=false".format(status)
        }).GetList():
            if item['mimeType'] == MineType.GF.value and item[
                    "title"] == dir_name:
                self.item_id = item['id']

    def make_bakup_dir(self, backup_dir_name):
        self.backup_dir_name = backup_dir_name
        dirNameList = []
        for item in drive.ListFile({
                'q':
                "'{}' in parents and trashed=false".format(self.item_id)
        }).GetList():
            dirNameList.append(item['title'])

        if not self.backup_dir_name in dirNameList:
            file = drive.CreateFile({
                'title': self.backup_dir_name,
                'parents': [{
                    'id': self.item_id
                }],
                'mimeType': MineType.GF.value
            })
            file.Upload()

    def make_backup_file(self):
        file_name = "backup_{}".format(
            datetime.datetime.now().strftime("%Y%m%d_%H:%M:%S"))
        file = drive.CreateFile({
            'title': file_name,
            'parents': [{
                'id': self.item_id
            }]
        })
        file.SetContentFile('{}/.my_config/my_conf'.format(
            os.environ.get('HOME')))
        file.Upload()


class MineType(Enum):
    # ref: https://developers.google.com/drive/api/v2/mime-types
    GF = "application/vnd.google-apps.folder"
    TP = "text/plain"
    TH = "text/html"
    TX = "text/xml"
    IJ = "image/jpeg"
    IP = "image/png"
    AP = "application/pdf"


def main(params):
    if len(params) != 0:
        dir_name = params[0]
        backup_dir_name = platform.system() + "@" + os.environ.get('USER')

        gd = GoogleDrive(dir_name)
        gd.search_id(gd.dir_name)

        gd.make_bakup_dir(backup_dir_name)
        gd.search_id(backup_dir_name, gd.item_id)
        gd.make_backup_file()
        print("Success!")

    else:
        print("Param Error")


if __name__ == "__main__":
    main(sys.argv[1:])
